#include <avr/io.h>
#define F_CPU 16000000UL
#include <util/delay.h>
#include <stdlib.h>
#include <math.h>

// LCD control and data
#define LCD_C_P PORTD
#define LCD_D_P PORTA
#define LCD_C_DDR DDRD
#define LCD_D_DDR DDRA
#define EN 1
#define RW 2
#define RS 0

// Keypad
#define KOUT PORTB
#define KIN PINB
#define KDDR DDRB

// Keypad layout
unsigned char KEY[4][4] = {
	{'/', '9', '8', '7'},
	{'*', '6', '5', '4'},
	{'-', '3', '2', '1'},
	{'+', '=', '0', 'o'}
};

// LCD enable pulse
void enable() {
	_delay_us(0.5);
	LCD_C_P |= (1 << EN);
	_delay_us(1);
	LCD_C_P &= ~(1 << EN);
	_delay_ms(2);
}

// Send command or data to LCD
void send_D_C(unsigned char a, unsigned char t) {
	if (t == 0) // command
		LCD_C_P &= ~(1 << RS);
	else        // data
		LCD_C_P |= (1 << RS);

	LCD_C_P &= ~(1 << RW);
	LCD_D_P &= 0xF0;
	LCD_D_P |= (a >> 4);
	enable();
	LCD_D_P &= 0xF0;
	LCD_D_P |= (a & 0x0F);
	enable();
}

// Set cursor position
void LCD_X_Y(unsigned char x, unsigned char y) {
	if (y == 0)
		send_D_C((0x80 + x), 0);
	else if (y == 1)
		send_D_C((0xC0 + x), 0);
}

// Display string on LCD
void LCD_D_C_ST(unsigned char* s) {
	while (*s != '\0') {
		send_D_C(*s, 1);
		s++;
	}
}

// Display single character
void LCD_D_C_VAR(unsigned char s) {
	send_D_C(s, 1);
}

// Initialize LCD
void LCD_INIT1() {
	unsigned char com[] = { 0x33, 0x32, 0x28, 0x0F, 0x06, 0x80 };
	_delay_ms(15);
	for (unsigned char i = 0; i < 6; i++) {
		send_D_C(com[i], 0);
	}
}

// Get character from keypad
char get_char() {
	unsigned char C = 0, R = 0, K, a = 'o';

	for (unsigned char i = 0; i < 4; i++) {
		KOUT = ~(1 << i);
		_delay_ms(1);
		C = (KIN & 0xF0);
		if (C != 0xF0) {
			R = i;
			break;
		}
	}

	for (unsigned char j = 4; j < 8; j++) {
		K = (~(1 << j) & 0xF0);
		if (C == K) {
			a = KEY[R][j - 4];
			break;
		}
	}

	return a;
}

int main(void) {
	unsigned char a;
	unsigned int n1 = 0, c = 0, found;

	KDDR = 0x0F;
	DDRA = 0xFF;
	LCD_D_DDR |= 0x0F;
	LCD_C_DDR |= 0x07;
	LCD_INIT1();

	KOUT = 0xF0;

	while (1) {
		found = 0;

		// Wait for key press
		do {
			while ((KIN & 0xF0) == 0xF0);
			_delay_ms(1);
		} while ((KIN & 0xF0) == 0xF0);

		// Read characters until operator is found
		do {
			a = get_char();

			// Check if it's a digit
			found = 0;
			for (int i = 0; i < 4; i++) {
				for (int j = 0; j < 4; j++) {
					if (KEY[i][j] == a) {
						found = 1;
						break;
					}
				}
			}

			if (found == 1 && a >= '0' && a <= '9') {
				LCD_X_Y(c++, 0);
				LCD_D_C_VAR(a);

				char str[2] = {a, '\0'};
				n1 = n1 * 10 + atoi(str);
			}

		} while (a != '+' && a != '-' && a != '*' && a != '/');

		// You now have n1 and the operator a, ready for next steps
	}
}
